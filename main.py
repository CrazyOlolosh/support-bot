import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    filters,
    MessageHandler,
    Application,
    ContextTypes,
    CommandHandler,
    ConversationHandler,
)
import requests

BOT_TOKEN = os.environ.get("BOT_TOKEN")
USEDESK_TOKEN = os.environ.get("USEDESK_TOKEN")
PORT = int(os.environ.get("PORT", "8443"))
HEROKU_APP_NAME = os.getenv("HEROKU_APP_NAME")

status_list = {
    1: "–û—Ç–∫—Ä—ã—Ç",
    2: "–í—ã–ø–æ–ª–Ω–µ–Ω",
    3: "–ó–∞–∫—Ä—ã—Ç",
    4: "–£–¥–∞–ª–µ–Ω",
    5: "–ù–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏",
    6: "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
    7: "–°–ø–∞–º",
    8: "–ù–æ–≤—ã–π",
    9: "–†–∞—Å—Å—ã–ª–∫–∞",
    10: "–û–±—ä–µ–¥–∏–Ω–µ–Ω",
}

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

(INITIAL, NAME, MAIL, THEME, PRE_STATUS, STATUS, OTHER, NEW_TICKET, HELPFULL) = range(9)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    continue_keyboard = [["–ü—Ä–æ–¥–æ–∂–∏—Ç—å"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç‚Äã‚Äã! –ù–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö ‚ù§Ô∏èÔ∏è\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç –ø–∞—Ä—ã –º–∏–Ω—É—Ç –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤, –Ω–æ –µ—Å–ª–∏ –º—ã –Ω–µ –∑–∞—Å—Ç–∞–Ω–µ–º –≤–∞—Å —Ç—É—Ç, –æ—Ç–≤–µ—Ç –Ω–∞–π–¥–µ—Ç –≤–∞—Å –≤ –ø–æ—á—Ç–µ.",
        reply_markup=ReplyKeyboardMarkup(
            continue_keyboard,
            one_time_keyboard=True,
        ),
    )

    return INITIAL


async def initial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")

    return NAME


async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    input_name = update.message.text
    context.user_data["name"] = input_name
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {input_name}! –£–∫–∞–∂–∏ —Å–≤–æ–π e-mail.")

    return MAIL


async def mail(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    theme_keyboard = [
        ["–•–æ—á—É —É –í–∞—Å —Ä–∞–±–æ—Ç–∞—Ç—å", "–•–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"],
        ["–•–æ—á—É —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è", "–£ –º–µ–Ω—è –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"],
    ]
    input_mail = update.message.text
    context.user_data["mail"] = input_mail
    await update.message.reply_text(
        f"–ü–æ—á—Ç–∞ {input_mail} –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å —Ç–æ–±–æ–π.\n"
        "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup(
            theme_keyboard,
            one_time_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏ —Ç–µ–º—É",
        ),
    )

    return THEME


async def job(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    client_name = context.user_data["name"]
    await update.message.reply_text(
        f'–î–æ—Ä–æ–≥–æ–π, {client_name}! –ù–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ https://blackcaviar.games/ –≤ —Ä–∞–∑–¥–µ–ª–µ "–í–∞–∫–∞–Ω—Å–∏–∏". –í—ã, —Ç–∞–∫–∂–µ, –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É job@blackcaviar.games.\n'
        "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.üòâ"
    )

    return HELPFULL


async def cooperate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    client_name = context.user_data["name"]
    await update.message.reply_text(
        f"–î–æ—Ä–æ–≥–æ–π, {client_name}! –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É info@blackcaviar.games.\n"
        "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.üòâ"
    )

    return HELPFULL


async def pre_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"""–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è\n(–æ–Ω —É–∫–∞–∑–∞–Ω –≤ –ø–∏—Å—å–º–µ)""",
    )
    await update.message.reply_text(
        f"""–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è (–æ–Ω —É–∫–∞–∑–∞–Ω –≤ –ø–∏—Å—å–º–µ)"""
    )

    return STATUS


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    input_ticket = update.message.text
    req = requests.get(
        f"https://api.usedesk.ru/ticket?api_token={USEDESK_TOKEN}&ticket_id={input_ticket}"
    )
    resp = req.json()
    print(resp)
    try:
        t_status = resp["ticket"]["status_id"]
        result = status_list[t_status]
        status_result = f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{input_ticket}: {result}."
    except KeyError:
        status_result = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë."
        return PRE_STATUS
    await context.bot.send_message(chat_id=update.effective_chat.id, text=status_result)

    return HELPFULL


async def other(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(f"""–û–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—É—Ç—å –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è""")

    return NEW_TICKET


async def helpfull(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    help_keyboard = [["–î–∞", "–ù–µ—Ç"]]
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"""–ú–æ–π –æ—Ç–≤–µ—Ç –ø–æ–º–æ–≥ –í–∞–º?""",
        reply_markup=ReplyKeyboardMarkup(
            help_keyboard,
            one_time_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç",
        ),
    )
    await update.message.reply_text(
        f"""–ú–æ–π –æ—Ç–≤–µ—Ç –ø–æ–º–æ–≥ –í–∞–º?""",
        reply_markup=ReplyKeyboardMarkup(
            help_keyboard,
            one_time_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç",
        ),
    )


async def bye(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ë—ã–ª —Ä–∞–¥ –í–∞–º –ø–æ–º–æ—á—å!\n"
        "–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.\n"
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove(),
    )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü–æ–∫–∞ –ø–æ–∫–∞. –ë—É–¥—É —Ä–∞–¥ —Å–Ω–æ–≤–∞ –ø–æ–±–æ–ª—Ç–∞—Ç—å", reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


if __name__ == "__main__":
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            INITIAL: [MessageHandler(filters.TEXT, initial)],
            NAME: [MessageHandler(filters.TEXT, name)],
            MAIL: [MessageHandler(filters.TEXT, mail)],
            THEME: [
                MessageHandler(filters.Regex("(—Ä–∞–±–æ—Ç–∞—Ç—å)"), job),
                MessageHandler(filters.Regex("(—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ)"), cooperate),
                MessageHandler(filters.Regex("(—Å—Ç–∞—Ç—É—Å)"), pre_status),
                MessageHandler(filters.Regex("(–¥—Ä—É–≥–æ–π)"), other),
            ],
            PRE_STATUS: [MessageHandler(filters.Regex("(\d{8,9})"), pre_status)],
            STATUS: [MessageHandler(filters.TEXT, status)],
            OTHER: [MessageHandler(filters.TEXT, other)],
            NEW_TICKET: [],
            HELPFULL: [
                MessageHandler(filters.Regex("(–¥–∞)"), bye),
                MessageHandler(filters.Regex("(–Ω–µ—Ç)"), other),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"https://{HEROKU_APP_NAME}.herokuapp.com/{BOT_TOKEN}",
    )

    application.bot.set_webhook(f"https://{HEROKU_APP_NAME}.herokuapp.com/{BOT_TOKEN}")
